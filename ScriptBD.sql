USE MASTER
GO

IF EXISTS(SELECT * FROM SYSDATABASES WHERE NAME = 'FACSQL') 
	DROP DATABASE FACSQL
GO
CREATE DATABASE FACSQL
GO

USE FACSQL
GO

CREATE TABLE MAE_EMIDOCELE(
	NID_EMIDOCELE INT IDENTITY(1,1) NOT NULL,
	NU_EMINUMRUC VARCHAR(11),
	NO_EMIRAZSOC VARCHAR(50),
	NO_ESTEMIELE VARCHAR(30),
	NO_CONEMIELE VARCHAR(50),
	NO_EMIUBIGEO CHAR(6),
	NO_EMIDEPART VARCHAR(50),
	NO_EMIPROVIN VARCHAR(50),
	NO_EMIDISTRI VARCHAR(50),
	NO_EMIDIRFIS VARCHAR(500),
	NO_BASTIPBAS VARCHAR(50),
	NO_BASNOMSRV VARCHAR(150),
	NO_BASNOMBAS VARCHAR(50),
	NO_BASUSRBAS VARCHAR(50),
	NO_BASUSRPAS VARCHAR(100),
	NO_TABFACCAB VARCHAR(50),
	NO_TABFACDET VARCHAR(50),
	NO_RUTCERDIG VARCHAR(800),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	CONSTRAINT PK_EMIDOCELE_NID_EMIDOCELE PRIMARY KEY (NID_EMIDOCELE)
)
GO

CREATE TABLE TBL_DOCELECAB(
	NID_DOCELECAB INT IDENTITY(1,1) NOT NULL,
	NU_DOCSERSUN VARCHAR(10),
	NU_DOCNUMSUN VARCHAR(10),
	FE_DOCFECEMI DATETIME,
	HO_DOCHOREMI CHAR(8),
	CO_DOCTIPDOC CHAR(2),
	CO_DOCTIPMND CHAR(3),
	FE_DOCFECVEN DATETIME,
	CO_EMITIPDOC CHAR(1),
	NU_EMINUMRUC VARCHAR(11),
	NO_EMINOMCOM VARCHAR(1500),
	NO_EMIRAZSOC VARCHAR(1500),
	NO_EMIDOMDIR VARCHAR(200),
	NO_EMIDOMURB VARCHAR(25),
	NO_EMIDOMPRV VARCHAR(30),
	CO_EMIDOMUBI CHAR(6),
	NO_EMIDOMDEP VARCHAR(30),
	NO_EMIDOMDIS VARCHAR(30),
	CO_EMIDOMPAI CHAR(2),
	FL_VENTAITIN CHAR(1),
	NO_ITNDIRCOM VARCHAR(200),
	NO_ITNURBANI VARCHAR(25),
	NO_ITNPROVIN VARCHAR(30),
	CO_ITNCODUBI CHAR(6),
	NO_ITNDEPART VARCHAR(30),
	NO_ITNDISTRI VARCHAR(30),
	CO_ITNCODPAI CHAR(2),
	FL_VENTAEXPO CHAR(1),
	CO_EXPCODPAI CHAR(2),
	CO_EMICODANE CHAR(4),
	CO_RECTIPDOC CHAR(1),
	NU_RECNUMDOC VARCHAR(15),
	NO_RECRAZSOC VARCHAR(1500),
	CO_REMTIPDOC CHAR(2),
	NU_REMNUMDOC VARCHAR(30),
	FL_REFADIDOC CHAR(1),
	MT_TOTMONIMP DECIMAL(12,2),
	MT_TOTVENEXP DECIMAL(12,2),
	MT_TOTIMPEXP DECIMAL(12,2),
	CO_CODTRIEXP CHAR(4),
	MT_TOTVENINA DECIMAL(12,2),
	MT_TOTIMPINA DECIMAL(12,2),
	CO_CODTRIINA CHAR(4),
	MT_TOTVENEXO DECIMAL(12,2),
	MT_TOTIMPEXO DECIMAL(12,2),
	CO_CODTRIEXO CHAR(4),
	MT_TOTVENGRA DECIMAL(12,2),
	MT_TOTIMPGRA DECIMAL(12,2),
	CO_CODTRIGRA CHAR(4),
	MT_TOTVENGRV DECIMAL(12,2),
	MT_TOTIMPGRV DECIMAL(12,2),
	CO_CODTRIGRV CHAR(4),
	MT_ISCMONBAS DECIMAL(12,2),
	MT_TOTMONISC DECIMAL(12,2),
	FL_CARGODESC VARCHAR(5),
	CO_CODCARDES CHAR(2),
	PO_CARDESPRC DECIMAL(12,5),
	MT_MONCARDES DECIMAL(12,2),
	MT_CARDESBAS DECIMAL(12,2),
	MT_TOTMONDES DECIMAL(12,2),
	MT_TOTMONCAR DECIMAL(12,2),
	MT_TOTIMPORT DECIMAL(12,2),
	MT_TOTVALVEN DECIMAL(12,2),
	MT_TOTPREVEN DECIMAL(12,2),
	CO_ADILEYEND CHAR(4),
	TX_ADIDESLEY VARCHAR(200),
	CO_ADITIPOPE CHAR(4),
	FL_PERCEPCIO CHAR(1),
	NO_PERINCADE VARCHAR(5),
	CO_PERREASON CHAR(2),
	PO_PERPORAPL DECIMAL(12,5),
	MT_PERMONPER DECIMAL(12,2),
	MT_PERBASIMP DECIMAL(12,2),
	FL_ANTICIPOS CHAR(1),
	MT_TOTMONANT DECIMAL(12,2),
	CO_GUIARUBIG CHAR(6),
	NO_GUIARDIRE VARCHAR(200),
	NO_GUIARURBA VARCHAR(25),
	NO_GUIARPROV VARCHAR(30),
	NO_GUIARDEPA VARCHAR(30),
	NO_GUIARDIST VARCHAR(30),
	CO_GUIARPAIS CHAR(2),
	FL_DETRACCIO CHAR(1),
	CO_DTRCODBIE CHAR(3),
	NO_DTRCUEBAN VARCHAR(100),
	MT_DTRMONDTR DECIMAL(12,2),
	PO_DTRPRCDTR DECIMAL(12,5),
	CO_SUNESTENV CHAR(2),
	TX_SUNRESENV VARCHAR(8000),
	FL_SUNDOCXML CHAR(1),
	XM_SUNDOCXML VARCHAR(MAX),
	FL_SUNDOCPDF CHAR(1),
	B6_SUNDOCPDF VARCHAR(MAX),
	FL_SUNDOCCDR CHAR(1),
	B6_SUNDOCCDR VARCHAR(MAX),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	CONSTRAINT PK_DOCELECAB_NID_DOCELECAB PRIMARY KEY (NID_DOCELECAB)
)
GO

CREATE TABLE TBL_DOCELEREF(
	NID_DOCELEREF INT IDENTITY(1,1),
	NU_REFDOCORG VARCHAR(40),
	CO_REFTIPDOC CHAR(2),
	NU_REFNUMDOC VARCHAR(30),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	NID_DOCELECAB INT,
	CONSTRAINT PK_DOCELEREF_NID_DOCELEREF PRIMARY KEY (NID_DOCELEREF),
	CONSTRAINT FK_DOCELEREF_DOCELECAB_NID_DOCELECAB FOREIGN KEY (NID_DOCELECAB) REFERENCES TBL_DOCELECAB (NID_DOCELECAB)
)
GO

CREATE TABLE TBL_DOCELEDET(
	NID_DOCELEDET INT IDENTITY(1,1),
	NU_DETORDITM VARCHAR(5),
	CO_DETUNDMED VARCHAR(3),
	QT_DETCANITM DECIMAL(12,10),
	CO_DETCODPRO VARCHAR(30),
	CO_DETCOPRSU VARCHAR(8),
	CO_DETCODGS1 VARCHAR(14),
	TX_DETDESITM VARCHAR(500),
	MT_DETVALUNI DECIMAL(12,10),
	MT_DETPREVEN DECIMAL(12,10),
	CO_DETCODPRE CHAR(2),
	MT_DETVALREF DECIMAL(12,10),
	CO_DETCOVARE CHAR(2),
	MT_DETTOTIMP DECIMAL(12,2),
	MT_AFEMONBAS DECIMAL(12,2),
	MT_AFEMONAFE DECIMAL(12,2),
	PO_AFEMONPRC DECIMAL(12,5),
	CO_AFEREASON VARCHAR(2),
	CO_AFECODTRI CHAR(4),
	MT_ISCMONBAS DECIMAL(12,2),
	MT_ISCMONAFE DECIMAL(12,2),
	PO_ISCMONPRC DECIMAL(12,5),
	CO_ISCTIPSIS CHAR(2),
	CO_ISCCODTRI CHAR(4),
	MT_DETVALVEN DECIMAL(12,2),
	NO_DETCARDES VARCHAR(5),
	CO_CARDESREA CHAR(2),
	DE_CARDESFAC DECIMAL(12,5),
	MT_CARDESMON DECIMAL(12,2),
	MT_CDEMONBAS DECIMAL(12,2),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	NID_DOCELECAB INT,
	CONSTRAINT PK_DOCELEDET_NID_DOCELEDET PRIMARY KEY (NID_DOCELEDET),
	CONSTRAINT FK_DOCELECAB_DOCELEDET_NID_DOCELECAB FOREIGN KEY (NID_DOCELECAB) REFERENCES TBL_DOCELECAB (NID_DOCELECAB)
)
GO

CREATE TABLE TL_PROFACINT(
	NID_PROFACINT INT IDENTITY(1,1),
	CO_ESTPROINT VARCHAR(30),
	NO_ESTPROINT VARCHAR(100),
	CO_TIPPROFAC VARCHAR(30),
	NO_TIPPROFAC VARCHAR(150),
	TX_DESCRIPCI VARCHAR(3000),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	NID_EMIDOCELE INT
	CONSTRAINT PK_PROMIGINT_NID_PROMIGINT PRIMARY KEY (NID_PROFACINT),
	CONSTRAINT FK_PROMIGINT_NID_EMIDOCELE FOREIGN KEY (NID_EMIDOCELE) REFERENCES MAE_EMIDOCELE(NID_EMIDOCELE)
)
GO

CREATE TABLE MAE_DATGENFAC(
	NID_DATGENFAC INT IDENTITY(1,1),
	NO_NOMMAEFAC VARCHAR(150),
	TX_DESMAEFAC VARCHAR(300),
	NO_CAMPOFAC1 VARCHAR(100),
	NO_CAMPOFAC2 VARCHAR(100),
	NO_CAMPOFAC3 VARCHAR(100),
	NO_CAMPOFAC4 VARCHAR(100),
	NO_CAMPOFAC5 VARCHAR(100),
	NO_CAMPOFAC6 VARCHAR(100),
	--
	FE_REGCREACI DATETIME,
	FE_REGMODIFI DATETIME,
	FL_REGINACTI CHAR(1),
	CONSTRAINT PK_DATGENFAC_NID_DATGENFAC PRIMARY KEY (NID_DATGENFAC),
)

-- INSERCCIÓN DE DATOS
--
INSERT INTO MAE_DATGENFAC(NO_NOMMAEFAC, TX_DESMAEFAC, NO_CAMPOFAC1, NO_CAMPOFAC2, FE_REGCREACI, FL_REGINACTI)
VALUES('TIPPROINT', 'Guarda todos los tipos de procesos de la interface', 'MIG', 'Migración', GETDATE(), '0');
--
INSERT INTO MAE_DATGENFAC(NO_NOMMAEFAC, TX_DESMAEFAC, NO_CAMPOFAC1, NO_CAMPOFAC2, FE_REGCREACI, FL_REGINACTI)
VALUES('ESTINTFAC', 'Guarda todos los estados en ejecución de la interface', 'CO', 'Correcto', GETDATE(), '0');
INSERT INTO MAE_DATGENFAC(NO_NOMMAEFAC, TX_DESMAEFAC, NO_CAMPOFAC1, NO_CAMPOFAC2, FE_REGCREACI, FL_REGINACTI)
VALUES('ESTINTFAC', 'Guarda todos los estados en ejecución de la interface', 'EJ', 'Ejecutando', GETDATE(), '0');
INSERT INTO MAE_DATGENFAC(NO_NOMMAEFAC, TX_DESMAEFAC, NO_CAMPOFAC1, NO_CAMPOFAC2, FE_REGCREACI, FL_REGINACTI)
VALUES('ESTINTFAC', 'Guarda todos los estados en ejecución de la interface', 'EX', 'Excepción', GETDATE(), '0');
--
INSERT INTO MAE_EMIDOCELE VALUES('20263019807', 'GRANOTEC PERU SA', 'ACTIVO', 'HABIDO', '150103', 'Lima', 'Lima', 'Ate', 'AV. LOS INGENIEROS NRO. 112 URB. - SANTA RAQUEL 2DA ETAPA', 'SQL', 'DESKTOP-U45U0IC\SQLEXPRESS', 'RSFACCAR', 'SA', 'A123456$', 'FT0001FACC', 'FT0001FACD', '', GETDATE(), NULL, '0');
INSERT INTO MAE_EMIDOCELE VALUES('20493098994', 'INVERSIONES INTI TUMI SOCIEDAD ANONIMA CERRADA', 'ACTIVO', 'HABIDO', '150116', 'Lima', 'Lima', 'Lince', 'JR. BERNARDO ALCEDO NRO. 329', 'SQL', 'DESKTOP-U45U0IC\SQLEXPRESS', 'RSFACCAR', 'SA', 'A123456$', 'FT0001FACC', 'FT0001FACD', '', GETDATE(), NULL, '0');
INSERT INTO MAE_EMIDOCELE VALUES('10074932903', 'ALVAREZ VARGAS JAVIER MAXIMILIANO', 'ACTIVO', 'HABIDO', '150115', 'Lima', 'Lima', 'La victoria', 'JR. GAMARRA NRO. 745 INT. 102', 'SQL', 'DESKTOP-U45U0IC\SQLEXPRESS', 'RSFACCAR', 'SA', 'A123456$', 'FT0001FACC', 'FT0001FACD', '', GETDATE(), NULL, '0');
GO
--CREACION DE PROCEDURES

CREATE PROCEDURE SPS_SEG_GETERRINF
AS  
SELECT  
    ERROR_NUMBER() AS NU_ERRNUMBER
    ,ERROR_SEVERITY() AS NO_ERRSERVER
    ,ERROR_STATE() AS NO_ERROSTATE
    ,ERROR_PROCEDURE() AS NO_ERRORPROC
    ,ERROR_LINE() AS NU_ERRORLINE
    ,ERROR_MESSAGE() AS TX_ERRORMESS;  
GO

CREATE PROCEDURE SPS_MAE_EMIDOCELE
AS
BEGIN
	SELECT
		*
	FROM MAE_EMIDOCELE
	WHERE FL_REGINACTI = '0'
	ORDER BY FE_REGCREACI
END
GO

CREATE PROCEDURE SPS_TL_PROFACINT_BY_EMIDOCELE(
	@NID_EMIDOCELE INT,
	@CO_ESTPROINT VARCHAR(30),
	@CO_TIPPROFAC VARCHAR(30)
)
AS
BEGIN
	SELECT NID_EMIDOCELE, CO_ESTPROINT, CO_TIPPROFAC
	FROM TL_PROFACINT
	WHERE CO_ESTPROINT = @CO_ESTPROINT
	AND CO_TIPPROFAC = @CO_TIPPROFAC
	AND NID_EMIDOCELE = @NID_EMIDOCELE
	AND FL_REGINACTI = '0'
	ORDER BY FE_REGCREACI
END
GO

CREATE PROCEDURE SPI_TL_PROFACINT(
	@CO_TIPPROFAC VARCHAR(30), 
	@CO_ESTPROINT VARCHAR(30), 
	@NID_EMIDOCELE INT
)
AS
BEGIN
	DECLARE @NO_TRANSNAME VARCHAR(20);
	SELECT @NO_TRANSNAME = 'IPROFACINT'
	BEGIN TRANSACTION
	BEGIN TRY
		DECLARE @NO_TIPPROFAC VARCHAR(150),
				@NO_ESTPROINT VARCHAR(150)

		SELECT @NO_TIPPROFAC = TIPPROFAC.NO_CAMPOFAC2
		FROM MAE_DATGENFAC TIPPROFAC
		WHERE TIPPROFAC.NO_NOMMAEFAC = 'TIPPROINT'
		AND TIPPROFAC.NO_CAMPOFAC1 = @CO_TIPPROFAC
		AND TIPPROFAC.FL_REGINACTI = '0'

		SELECT @NO_ESTPROINT = ESTPROINT.NO_CAMPOFAC2
		FROM MAE_DATGENFAC ESTPROINT
		WHERE ESTPROINT.NO_NOMMAEFAC = 'ESTINTFAC'
		AND ESTPROINT.NO_CAMPOFAC1 = @CO_ESTPROINT
		AND ESTPROINT.FL_REGINACTI = '0'

		INSERT INTO TL_PROFACINT(CO_ESTPROINT, NO_ESTPROINT, CO_TIPPROFAC, NO_TIPPROFAC, FE_REGCREACI, NID_EMIDOCELE, TX_DESCRIPCI, FL_REGINACTI)
		SELECT @CO_ESTPROINT, @NO_ESTPROINT, @CO_TIPPROFAC, @NO_TIPPROFAC, GETDATE(), @NID_EMIDOCELE, 'Apertura de Nuevo Proceso en ejecución','0'
		
		
		IF @@TRANCOUNT > 0
		BEGIN
			COMMIT TRANSACTION @NO_TRANSNAME;
		END
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION @NO_TRANSNAME;
		EXEC SPS_SEG_GETERRINF;
	END CATCH
END
GO

CREATE PROCEDURE SPU_TL_PROFACINT(
	@CO_TIPPROFAC VARCHAR(30), 
	@CO_ESTPROINT VARCHAR(30), 
	@NID_EMIDOCELE INT,
	@TX_DESCRIPCI VARCHAR(3000) = NULL
)
AS
BEGIN
	DECLARE @NO_TRANSNAME VARCHAR(20);
	SELECT @NO_TRANSNAME = 'UPROFACINT'
	BEGIN TRANSACTION
	BEGIN TRY
		UPDATE TL_PROFACINT
			SET CO_ESTPROINT = @CO_ESTPROINT,
			TX_DESCRIPCI = 
				CASE
					WHEN ISNULL(@TX_DESCRIPCI, '') <> '' THEN @TX_DESCRIPCI
					WHEN @CO_ESTPROINT = 'EX'  THEN  'Proceso Finalizado con errores'
					WHEN @CO_ESTPROINT = 'CO' THEN 'Proceso Finalizado correctamente'
				END
		WHERE NID_EMIDOCELE = @NID_EMIDOCELE
		AND CO_TIPPROFAC = @CO_TIPPROFAC
		AND CO_ESTPROINT = 'EJ'
		AND FL_REGINACTI = '0'
		IF @@TRANCOUNT > 0
		BEGIN
			COMMIT TRANSACTION @NO_TRANSNAME;
		END
	END TRY
	BEGIN CATCH
		EXEC SPS_SEG_GETERRINF;
	END CATCH
END

CREATE PROCEDURE SPI_TBL_DOCELECAB(
	@XM_DOCELECAB XML
)
AS
BEGIN
	
END
/*
DECLARE @idoc int, @doc varchar(1000);  
SET @doc ='  
<ROOT>  
<Customer CustomerID="VINET" ContactName="Paul Henriot">  
   <Order CustomerID="VINET" EmployeeID="5" OrderDate="1996-07-04T00:00:00">  
      <OrderDetail OrderID="10248" ProductID="11" Quantity="12"/>  
      <OrderDetail OrderID="10248" ProductID="42" Quantity="10"/>  
   </Order>  
</Customer>  
<Customer CustomerID="LILAS" ContactName="Carlos Gonzlez">  
   <Order CustomerID="LILAS" EmployeeID="3" OrderDate="1996-08-16T00:00:00">  
      <OrderDetail OrderID="10283" ProductID="72" Quantity="3"/>  
   </Order>  
</Customer>  
</ROOT>';  
--Create an internal representation of the XML document.  
EXEC sp_xml_preparedocument @idoc OUTPUT, @doc;  
-- Execute a SELECT statement that uses the OPENXML rowset provider.  
SELECT    *  
FROM       OPENXML (@idoc, '/ROOT/Customer',1)  
            WITH (CustomerID  varchar(10),  
                  ContactName varchar(20));  */

select * from TL_PROFACINT
ORDER BY FE_REGCREACI DESC

TRUNCATE TABLE TL_PROFACINT